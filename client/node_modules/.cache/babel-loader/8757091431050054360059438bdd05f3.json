{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth'; // for authentication\n\nimport 'firebase/compat/firestore'; // for db\n\nconst config = {\n  apiKey: 'AIzaSyChDIwn8oTBoWxj78QV0m4SQjVq_FlUx6o',\n  authDomain: 'crwn-clothing-db-f8235.firebaseapp.com',\n  projectId: 'crwn-clothing-db-f8235',\n  storageBucket: 'crwn-clothing-db-f8235.appspot.com',\n  messagingSenderId: '590473202452',\n  appId: '1:590473202452:web:fb3ac727774acf9b149001',\n  measurementId: 'G-ZN2CE5E2E7'\n}; ////////////////////////////////////////////\n\nfirebase.initializeApp(config); ////////////////////////////////////////////\n// Save data to FireBase DB\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`persona/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log('error creating user');\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n  });\n};\n/**\n * SIGN IN WITH GOOGLE\n */\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","addCollectionAndDocuments","collectionKey","objectToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"sources":["/home/elson/crwn-clothing/src/firebase/firebase.utils.js"],"sourcesContent":["import firebase from 'firebase/compat/app'\nimport 'firebase/compat/auth' // for authentication\nimport 'firebase/compat/firestore' // for db\n\nconst config = {\n  apiKey: 'AIzaSyChDIwn8oTBoWxj78QV0m4SQjVq_FlUx6o',\n  authDomain: 'crwn-clothing-db-f8235.firebaseapp.com',\n  projectId: 'crwn-clothing-db-f8235',\n  storageBucket: 'crwn-clothing-db-f8235.appspot.com',\n  messagingSenderId: '590473202452',\n  appId: '1:590473202452:web:fb3ac727774acf9b149001',\n  measurementId: 'G-ZN2CE5E2E7',\n}\n\n////////////////////////////////////////////\nfirebase.initializeApp(config)\n////////////////////////////////////////////\n\n// Save data to FireBase DB\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return\n\n  const userRef = firestore.doc(`persona/${userAuth.uid}`)\n\n  const snapShot = await userRef.get()\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth\n    const createdAt = new Date()\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      })\n    } catch (err) {\n      console.log('error creating user')\n    }\n  }\n\n  return userRef\n}\n\nexport const addCollectionAndDocuments = (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey)\n\n  const batch = firestore.batch()\n  objectToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc()\n  })\n}\n\n/**\n * SIGN IN WITH GOOGLE\n */\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nexport const provider = new firebase.auth.GoogleAuthProvider()\nprovider.setCustomParameters({ prompt: 'select_account' })\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,sBAAP,C,CAA8B;;AAC9B,OAAO,2BAAP,C,CAAmC;;AAEnC,MAAMC,MAAM,GAAG;EACbC,MAAM,EAAE,yCADK;EAEbC,UAAU,EAAE,wCAFC;EAGbC,SAAS,EAAE,wBAHE;EAIbC,aAAa,EAAE,oCAJF;EAKbC,iBAAiB,EAAE,cALN;EAMbC,KAAK,EAAE,2CANM;EAObC,aAAa,EAAE;AAPF,CAAf,C,CAUA;;AACAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB,E,CACA;AAEA;;AACA,OAAO,MAAMS,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;EAC3E,IAAI,CAACD,QAAL,EAAe;EAEf,MAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,WAAUJ,QAAQ,CAACK,GAAI,EAAtC,CAAhB;EAEA,MAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;EAEA,IAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;IACpB,MAAM;MAAEC,WAAF;MAAeC;IAAf,IAAyBV,QAA/B;IACA,MAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAI;MACF,MAAMV,OAAO,CAACW,GAAR,CAAY;QAChBJ,WADgB;QAEhBC,KAFgB;QAGhBC,SAHgB;QAIhB,GAAGV;MAJa,CAAZ,CAAN;IAMD,CAPD,CAOE,OAAOa,GAAP,EAAY;MACZC,OAAO,CAACC,GAAR,CAAY,qBAAZ;IACD;EACF;;EAED,OAAOd,OAAP;AACD,CAxBM;AA0BP,OAAO,MAAMe,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,WAAhB,KAAgC;EACvE,MAAMC,aAAa,GAAGjB,SAAS,CAACkB,UAAV,CAAqBH,aAArB,CAAtB;EAEA,MAAMI,KAAK,GAAGnB,SAAS,CAACmB,KAAV,EAAd;EACAH,WAAW,CAACI,OAAZ,CAAqBC,GAAD,IAAS;IAC3B,MAAMC,SAAS,GAAGL,aAAa,CAAChB,GAAd,EAAlB;EACD,CAFD;AAGD,CAPM;AASP;AACA;AACA;;AACA,OAAO,MAAMsB,IAAI,GAAGrC,QAAQ,CAACqC,IAAT,EAAb;AACP,OAAO,MAAMvB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,OAAO,MAAMwB,QAAQ,GAAG,IAAItC,QAAQ,CAACqC,IAAT,CAAcE,kBAAlB,EAAjB;AACPD,QAAQ,CAACE,mBAAT,CAA6B;EAAEC,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAetC,QAAf"},"metadata":{},"sourceType":"module"}